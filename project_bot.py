import io
import telebot as tb
from telebot import types
from PIL import Image
import check
from dotenv import load_dotenv
import os

load_dotenv('data.env')
purch_bot = tb.TeleBot(os.getenv('API'))

@purch_bot.message_handler(commands=['start', 'about'])
def greeting(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥', callback_data='qr'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É QR-–∫–æ–¥–∞', callback_data='qrdec'))
    markup.add(types.InlineKeyboardButton(text='–û –±–æ—Ç–µ', callback_data='info'))
    
    purch_bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)

@purch_bot.callback_query_handler(func = lambda callback: True)
def callback_message(callback):
    if callback.data == 'qr':
        qr_markup = types.InlineKeyboardMarkup()
        purch_bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π QR-–∫–æ–¥', reply_markup=qr_markup)

        @purch_bot.message_handler(content_types=['photo'])
        def get_photo(message):
            photo_id = message.photo[-1].file_id
            # –î–æ—Å—Ç–∞—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            photo_file = purch_bot.get_file(photo_id) # <class 'telebot.types.File'>
            downloaded_photo = purch_bot.download_file(photo_file.file_path) # <class 'bytes'>
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º
            fp=io.BytesIO(downloaded_photo)
            img = Image.open(fp)
            namepath='123.jpg'
            img.save(namepath)
            try:
                checkinfo=check.send_data(namepath,None)
                cont=''
                for c in range(0,len(checkinfo)):
                    for i,k in checkinfo[c].items():
                        if i == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                            cont+='\n'
                        cont+=str(i)+' : '+str(k)+' üíé\n'
                purch_bot.send_message(message.chat.id,text=cont)
                checkinfo=checkinfo.clear()
            except Exception:purch_bot.send_message(message.chat.id,text='‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –∏–ª–∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É ‚ùó')
            greeting(message)
   
   
    if callback.data=='qrdec':
        qrt_markup = types.InlineKeyboardMarkup()
        purch_bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Å–≤–æ–µ–≥–æ QR-–∫–æ–¥–∞', reply_markup=qrt_markup)

        @purch_bot.message_handler(content_types=['text'])
        def get_qrwithtxt(message):
            try:
                checkinfo=check.send_data(None,str(message.text))
                conttxt=''
                for c in range(0,len(checkinfo)):
                    for i,k in checkinfo[c].items():
                        if i == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                            conttxt+='\n'
                        conttxt+=str(i)+' : '+str(k)+' üíé\n'
                purch_bot.send_message(message.chat.id,text=conttxt)
                checkinfo=checkinfo.clear()
            except Exception:purch_bot.send_message(message.chat.id,text='‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É QR-–∫–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ ‚ùó')
            greeting(message)
    if callback.data == 'info':
        print('info')
        purch_bot.answer_callback_query(callback.id)

purch_bot.infinity_polling()