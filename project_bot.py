import io
import telebot as tb
from telebot import types
from PIL import Image
import check
from dotenv import load_dotenv
import os
import peewee as p
import models as m
import threading
from datetime import datetime
import Levenshtein
from peewee import fn
import re
with m.db as db:
    class Group:
        def create_group (self,namegroup,idgroup) :
            if namegroup==None:
                namegroup='–û–±—â–∏–µ –ø–æ–∫—É–ø–∫–∏'
            addgroup=m.Group(name=namegroup,groupchatid=idgroup)
            addgroup.save()
    class User:
        def add_user(self,fname,lname,idtg):
            adduser=m.User(firstname=fname,lastname=lname,tgid=idtg)
            adduser.save()
        def update_user(self,usid,stat):
            updateuser=m.User(status=stat)
            updateuser.id=usid
            updateuser.save()
    class GroupUser:
        def add_user_group(self,iduser,idgroup):
            add_userin_group=m.GroupUser(usersid=iduser,groupid=idgroup)
            add_userin_group.save()
    class Product:
        def add_product (self,prname,am,pop,totalpr):
            add_pr=m.Product(name=prname,amount=am,price_one_piece=pop,totalprice=totalpr)
            add_pr.save()
            return add_pr.id
    class Receipt:
        def add_receipt(self,grid,datehour):
            add_receipt=m.Receipts(groupsid=grid,dateandhour=datehour)
            add_receipt.save()
            return add_receipt.id
    class ProductReceipt:
        def add_product_receipt(self,idpr,idrec):
            add_pr_rec=m.ProductReceipt(productid=idpr,receiptid=idrec)
            add_pr_rec.save()
    class BuyList():
        def add_buylist(self,prdname,gid,uid):
            add_buyl=m.BuyList(product_name=prdname,grid=gid,usid=uid)
            add_buyl.save()
    load_dotenv('data.env')
    purch_bot = tb.TeleBot(os.getenv('API'))
    buy_list = {'ready_users': 0,
                        'users': {}}
    @purch_bot.message_handler(commands=['start', 'about'])
    def greeting(message):
        markup = types.InlineKeyboardMarkup()
        # markup.add(types.InlineKeyboardButton(text='–ü–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data='go_shopping'))
        markup.add(types.InlineKeyboardButton(text='‚úî –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É ‚úî', callback_data='bdgroup'))
        markup.add(types.InlineKeyboardButton(text='ü§î –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞‚ùî', callback_data='info'))
        markup.add(types.InlineKeyboardButton(text='üõç –°–æ–±–∏—Ä–∞—é—Å—å –∏–¥—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data='goingshop'))
        purch_bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
    def read_qr(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥', callback_data='qr'))
        markup.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É QR-–∫–æ–¥–∞', callback_data='qrdec'))
        
        purch_bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
    @purch_bot.callback_query_handler(func = lambda callback: True)
    def callback_message(callback):
        if callback.data == 'qr':
            qr_markup = types.InlineKeyboardMarkup()
            mesg=purch_bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π QR-–∫–æ–¥', reply_markup=qr_markup)
            purch_bot.register_next_step_handler(mesg,get_photo)


        elif callback.data=='qrdec':
            qrt_markup = types.InlineKeyboardMarkup()
            mesg=purch_bot.send_message(callback.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Å–≤–æ–µ–≥–æ QR-–∫–æ–¥–∞', reply_markup=qrt_markup)
            purch_bot.register_next_step_handler(mesg,get_qrwithtxt)

        elif callback.data == 'info':
            purch_bot.send_message(callback.message.chat.id, '''üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫, –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–µ–º—É –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –∫—É–ø–∏—Ç—å —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–ª—å–Ω—ã–ºüòá
                                   
                                   üìñüîß–ò–Ω—Å—Ç—Ä–∫—Ü–∏—èüîßüìñ

‚úÖ1.–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ –±–æ—Ç–µ, –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "‚úî –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É ‚úî"
‚úÖ2.–ï—Å–ª–∏ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å –∏–¥—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "üõç –°–æ–±–∏—Ä–∞—é—Å—å –∏–¥—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω" (–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª —Å–≤–æ–π –ø–æ—Ö–æ–¥ –∏–ª–∏ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ)
‚úÖ3.–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã—à–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõë–£—à–µ–ª –≤ –º–∞–≥–∞–∑–∏–Ω", –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚úÖ4.–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR –∫–æ–¥ –∏–ª–∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É, –≤—ã–±—Ä–∞–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–¥–∞—Ç—å –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                   
                                  ü§ó–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!‚ò∫''')
        # elif callback.data=='new_group':
        #     markupgroup=types.InlineKeyboardMarkup()
        #     markupgroup.add(types.InlineKeyboardButton(text='‚úÖ', callback_data='bdgroup'))
        #     purch_bot.send_message(callback.message.chat.id, 'ü§ù–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á', reply_markup=markupgroup)
        elif callback.data=='bdgroup':
            filtergr=m.Group.select().where(m.Group.groupchatid == callback.message.chat.id).count()
            if filtergr==0:
                addgroup=Group()
                addgroup.create_group(callback.message.chat.title,callback.message.chat.id)
                markupgroup=types.InlineKeyboardMarkup()
                markupgroup.add(types.InlineKeyboardButton(text='üíé', callback_data='add_user_group'))
                purch_bot.send_message(callback.message.chat.id, '‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á', reply_markup=markupgroup)
            else:
                markupaddusingr=types.InlineKeyboardMarkup()
                markupaddusingr.add(types.InlineKeyboardButton(text='üíé', callback_data='add_user_group'))
                purch_bot.send_message(callback.message.chat.id, 'üßê –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á',reply_markup=markupaddusingr)
        elif callback.data=='add_user_group':
            filteruser=m.User.select().where(m.User.tgid==callback.from_user.id).count()
            if filteruser==0:
                if callback.from_user.last_name==None:
                    adduser=User()
                    adduser.add_user(callback.from_user.first_name,'–ù–µ —É–∫–∞–∑–∞–Ω–æ',callback.from_user.id)
                else:
                    adduser=User()
                    adduser.add_user(callback.from_user.first_name,callback.from_user.last_name,callback.from_user.id)
            userdata=m.User.select().where(m.User.tgid==callback.from_user.id).get()
            userid=userdata.id
            groupdata=m.Group.select().where(m.Group.groupchatid==callback.message.chat.id).get()
            groupid=groupdata.id
            filtergroupuser=m.GroupUser.select().where((m.GroupUser.usersid==userid) & (m.GroupUser.groupid==groupid)).count()
            if filtergroupuser==0:
                adduseringr=GroupUser()
                adduseringr.add_user_group(userid,groupid)
                purch_bot.send_message(callback.message.chat.id, 'üôå –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!')
            else:
                purch_bot.send_message(callback.message.chat.id, 'ü•≥ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ')
        #–¢–∞–π–º–µ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        elif callback.data == 'goingshop':
            if m.User.select().where(m.User.tgid==callback.from_user.id).count()==0 or m.Group.select().where(m.Group.groupchatid==callback.message.chat.id).count()==0:
                markupaddusrorgr=types.InlineKeyboardMarkup()
                markupaddusrorgr.add(types.InlineKeyboardButton(text='‚úî –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É ‚úî', callback_data='bdgroup'))
                purch_bot.send_message(callback.message.chat.id,'üò¶ –ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–µ–π, –¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–≤–∏–º!',reply_markup=markupaddusrorgr)
            else:
                userdata=m.User.select().where(m.User.tgid==callback.from_user.id).get()
                userid=userdata.id
                groupdata=m.Group.select().where(m.Group.groupchatid==callback.message.chat.id).get()
                groupid=groupdata.id
                filtergroupuser=m.GroupUser.select().where((m.GroupUser.usersid==userid) & (m.GroupUser.groupid==groupid)).count()
                filterbuyer=m.User.select().join(m.GroupUser).where((m.User.id==userid) & (m.User.status==1) & (m.GroupUser.groupid_id==groupid)).count()
                if filterbuyer ==0:
                    updatestat=User()
                    updatestat.update_user(userid,stat=1)
                    if filtergroupuser==1:
                        markupwentshop=types.InlineKeyboardMarkup()
                        markupwentshop.add(types.InlineKeyboardButton(text='üõë –£—à–µ–ª –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data='wentshop'))
                        mesg=purch_bot.send_message(callback.message.chat.id, f'üõí{callback.from_user.first_name} —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏–¥—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –∫–æ–º—É-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å‚Åâ –ü–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(—Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º)]‚ùóüìÑ –ö–∞–∫ —Ç–æ–ª—å–∫–æ {callback.from_user.first_name} –Ω–∞–∂–º–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è ‚ùó',reply_markup=markupwentshop)
                        purch_bot.register_next_step_handler(mesg,readerbuylist)
                        
                        
            #     seconds = 180
            #     # –í—ã–≤–æ–¥ –º–∏–Ω—É—Ç
            #     while seconds > 0:
            #         if seconds % 60 == 0:
            #             purch_bot.send_message(callback.message.chat.id, f'–û—Å—Ç–∞–ª–æ—Å—å {seconds // 60} –º–∏–Ω.')
            #         seconds -= 1
            #         # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É
            #         threading.Event().wait(1) # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É
            #     purch_bot.send_message(callback.message.chat.id, '–í—Ä–µ–º—è –≤—ã—à–ª–æ, —Å–ø–∏—Å–æ–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!')
            #     read_qr(callback.message)
            #     # def Ready():
            #     #     purch_bot.send_message(callback.message.chat.id, '–í—Ä–µ–º—è –≤—ã—à–ª–æ, —Å–ø–∏—Å–æ–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!')
            #     #     read_qr(callback.message)
            #     # timer = threading.Timer(10, Ready)
            #     # timer.start()
                    else:
                        markupaddusingroup=types.InlineKeyboardMarkup()
                        markupaddusingroup.add(types.InlineKeyboardButton(text='üíé', callback_data='add_user_group'))
                        purch_bot.send_message(callback.message.chat.id, 'üò° –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ‚ùó–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨á',reply_markup=markupaddusingroup)
                else:
                    purch_bot.send_message(callback.message.chat.id, 'üò° –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω‚ùó')
        
        elif callback.data == 'wentshop':
            userdata=m.User.select().where(m.User.tgid==callback.from_user.id).get()
            userid=userdata.id
            groupdata=m.Group.select().where(m.Group.groupchatid==callback.message.chat.id).get()
            groupid=groupdata.id
            filterbuyer=m.User.select().join(m.GroupUser).where((m.User.id==userid) & (m.User.status==1) & (m.GroupUser.groupid_id==groupid)).count()
            if filterbuyer==1:
                updatestatzer=User()
                updatestatzer.update_user(userid,stat=0)
                purch_bot.send_message(callback.message.chat.id, f'üí®{callback.from_user.first_name} —É—à–µ–ª –≤ –º–∞–≥–∞–∑–∏–Ω ‚ùó –¢–æ–≤–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è ‚ùó')
                usbuy_tg = '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:'
                users_in_buylist = m.BuyList.select(m.BuyList.usid).where(m.BuyList.grid==groupid).distinct().dicts().execute()
                for user_id in users_in_buylist:
                    users_reqs = m.BuyList.select(m.BuyList.product_name, fn.COUNT(m.BuyList.product_name).alias('amount_prod')).where(m.BuyList.grid==groupid).distinct().group_by(m.BuyList.product_name).where(m.BuyList.usid == user_id['usid']).dicts().execute()
                    # for i in users_reqs:
                    #     print(i)
                    user_nick = m.User.select(m.User.firstname).where(m.User.id == user_id['usid']).get().firstname
                    usbuy_tg += "\nüë® " + user_nick + ":\n"
                    for prod in users_reqs:
                        usbuy_tg += "üß∫ " + prod['product_name'] + " " +str(prod['amount_prod']) + ' —à—Ç.\n'
                purch_bot.send_message(callback.message.chat.id, usbuy_tg)
                read_qr(callback.message)
            else:purch_bot.send_message(callback.message.chat.id, 'üëÄ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—ã –∏–¥–µ—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω!')
    
        #–ü–æ—Ö–æ–¥ –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏
        # elif callback.data == 'go_shopping':
        #     going_user = f'{callback.from_user.first_name}, –∏–¥—ë—Ç –≤ –º–∞–≥–∞–∑–∏–Ω!'
        #     markup = types.InlineKeyboardMarkup()
        #     markup.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—Å—Ç –ø–æ–∫—É–ø–æ–∫', callback_data='buy_list'))
        #     purch_bot.send_message(callback.message.chat.id, going_user, reply_markup=markup)
        #     buy_list['ready_users'] = 0
        #     buy_list['users'] = {}
        #–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
        # elif callback.data == 'ready':
        #     if callback.from_user.id in buy_list['users']:
        #         buy_list['ready_users'] += 1
        #         if buy_list['ready_users'] == len(buy_list['users']):
        #             purch_bot.send_message(callback.message.chat.id, '–°–ø–∏—Å–æ–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!')
        #             buy_list['ready_users'] = 0
        #             buy_list['users'] = {}
        #     else:
        #         purch_bot.send_message(callback.message.chat.id, '–í—ã –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!')
        #     print(callback.data)
        #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
        # elif callback.data == 'buy_list':
        #     purch_bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –ò –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ".')
        #     @purch_bot.message_handler(content_types=['text'])
        #     def add_in_list(message):
        #         if message.from_user.id not in buy_list['users']:
        #             buy_list['users'][message.from_user.id] = {message.from_user.first_name: []}
        #         else:
        #             buy_list['users'][message.from_user.id][message.from_user.first_name].append(message.text)
                    
        #         list_markup = types.InlineKeyboardMarkup()
        #         list_markup.add(types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data='ready'))
        #         purch_bot.send_message(callback.message.chat.id, '–ß—Ç–æ –±—ã –≤—ã –µ—â—ë —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=list_markup)
        #         print(buy_list)
        #         print(len(buy_list['users']))
        #         print(callback.data)
    def get_photo(message):
        photo_id = message.photo[-1].file_id
        # –î–æ—Å—Ç–∞—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        photo_file = purch_bot.get_file(photo_id) # <class 'telebot.types.File'>
        downloaded_photo = purch_bot.download_file(photo_file.file_path) # <class 'bytes'>
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º
        fp=io.BytesIO(downloaded_photo)
        img = Image.open(fp)
        namepath='123.jpg'
        img.save(namepath)
        try:
            checkinfo=check.send_data(namepath,None)
            cont=''
            productid=0
            recid=0
            for c in range(0,len(checkinfo)):
                for i,k in checkinfo[c].items():
                    cont+=str(k)+';'
                    if i =='–î–∞—Ç–∞':
                        groupdata=m.Group.select().where(m.Group.groupchatid==message.chat.id).get()
                        groupid=groupdata.id
                        addreceipt=Receipt()
                        recid=addreceipt.add_receipt(groupid,datetime.fromtimestamp(k))
                        cont=cont.replace(f'{k};','')
                    elif len(cont.split(';'))==5:
                        sendBD=cont.split(';')
                        addproduct=Product()
                        productid=addproduct.add_product(sendBD[0],sendBD[2],sendBD[1],sendBD[3])
                        cont=''
                    filterrec=m.ProductReceipt.select().where((m.ProductReceipt.productid_id == productid )&(m.ProductReceipt.receiptid == recid)).count()
                    if productid!=0 and recid!=0 and filterrec==0:
                        addpr_rec=ProductReceipt()
                        addpr_rec.add_product_receipt(productid,recid)
            checkinfo=checkinfo.clear()
            queryproduct=m.Product.select().join(m.ProductReceipt).where(m.ProductReceipt.receiptid==recid)
            answprod=queryproduct.dicts().execute()
            queryreceipt=m.BuyList.select(m.BuyList.usid).where(m.BuyList.grid==groupid)
            answrec=queryreceipt.dicts().execute()
            debtors=''
            nicktg=''
            for user_id in answrec:
                userlist=m.BuyList.select().where((m.BuyList.grid==groupid) & (m.BuyList.usid==user_id['usid']))
                answuserlist=userlist.dicts().execute()
                for princh in answprod:
                    for s in answuserlist:
                        if Levenshtein.ratio(princh.get('name').lower(),s.get('product_name').lower()) >0.5:
                            users_reqs = m.BuyList.select(m.BuyList.product_name, fn.COUNT(m.BuyList.product_name).alias('amount_prod')).where((m.BuyList.grid==groupid) & (m.BuyList.product_name==s.get('product_name'))).distinct().group_by(m.BuyList.product_name).where(m.BuyList.usid == s.get('usid')).dicts().execute()
                            for i in users_reqs:
                                debt=m.User.get(m.User.id==s.get('usid'))
                                lastnicktg=nicktg
                                nicktg='\n üòá '+str(debt.firstname)+' –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å \n'
                                if nicktg==lastnicktg:
                                    debtors+=f"üí∏ {float(princh.get('price_one_piece'))*int(i['amount_prod'])} üí∏ –∑–∞ üõí {s.get('product_name')} üõí - ‚ú® {i['amount_prod']} —à—Ç. ‚ú®\n"
                                else:debtors+=f"{nicktg}üí∏ {float(princh.get('price_one_piece'))*int(i['amount_prod'])} üí∏ –∑–∞ üõí {s.get('product_name')} üõí - ‚ú® {i['amount_prod']} —à—Ç. ‚ú®\n"
                            filterdel=m.BuyList.select().where((m.BuyList.grid==groupid) & (m.BuyList.usid==user_id['usid']) & (m.BuyList.product_name==s.get('product_name'))).count()
                            if filterdel!=0:
                                clearbuylist = m.BuyList.delete().where((m.BuyList.usid==user_id['usid']) & (m.BuyList.product_name==s.get('product_name')) & (m.BuyList.grid==groupid))
                                clearbuylist.execute()
            purch_bot.send_message(message.chat.id,debtors)
            clearbuylist = m.BuyList.delete().where(m.BuyList.grid==groupid)
            clearbuylist.execute()
        except Exception as e:print(e)#purch_bot.send_message(message.chat.id,text='‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –∏–ª–∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É ‚ùó')
        greeting(message)
    
    def get_qrwithtxt(message):
        try:
            checkinfo=check.send_data(None,str(message.text))
            conttxt=''
            productid=0
            recid=0
            for c in range(0,len(checkinfo)):
                for i,k in checkinfo[c].items():
                    conttxt+=str(k)+';'
                    if i =='–î–∞—Ç–∞':
                        groupdata=m.Group.select().where(m.Group.groupchatid==message.chat.id).get()
                        groupid=groupdata.id
                        addreceipt=Receipt()
                        recid=addreceipt.add_receipt(groupid,datetime.fromtimestamp(k))
                        conttxt=conttxt.replace(f'{k};','')
                    elif len(conttxt.split(';'))==5:
                        sendBD=conttxt.split(';')
                        addproduct=Product()
                        productid=addproduct.add_product(sendBD[0],sendBD[2],sendBD[1],sendBD[3])
                        conttxt=''
                    filterrec=m.ProductReceipt.select().where((m.ProductReceipt.productid_id == productid )&(m.ProductReceipt.receiptid == recid)).count()
                    if productid!=0 and recid!=0 and filterrec==0:
                        addpr_rec=ProductReceipt()
                        addpr_rec.add_product_receipt(productid,recid)
            checkinfo=checkinfo.clear()
            queryproduct=m.Product.select().join(m.ProductReceipt).where(m.ProductReceipt.receiptid==recid)
            answprod=queryproduct.dicts().execute()
            queryreceipt=m.BuyList.select(m.BuyList.usid).where(m.BuyList.grid==groupid)
            answrec=queryreceipt.dicts().execute()
            debtors=''
            nicktg=''
            for user_id in answrec:
                userlist=m.BuyList.select().where((m.BuyList.grid==groupid) & (m.BuyList.usid==user_id['usid']))
                answuserlist=userlist.dicts().execute()
                for princh in answprod:
                    for s in answuserlist:
                        if Levenshtein.ratio(princh.get('name').lower(),s.get('product_name').lower()) >0.5:
                            users_reqs = m.BuyList.select(m.BuyList.product_name, fn.COUNT(m.BuyList.product_name).alias('amount_prod')).where((m.BuyList.grid==groupid) & (m.BuyList.product_name==s.get('product_name'))).distinct().group_by(m.BuyList.product_name).where(m.BuyList.usid == s.get('usid')).dicts().execute()
                            for i in users_reqs:
                                debt=m.User.get(m.User.id==s.get('usid'))
                                lastnicktg=nicktg
                                nicktg='\n üòá '+str(debt.firstname)+' –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å \n'
                                if nicktg==lastnicktg:
                                    debtors+=f"üí∏ {float(princh.get('price_one_piece'))*int(i['amount_prod'])} üí∏ –∑–∞ üõí {s.get('product_name')} üõí - ‚ú® {i['amount_prod']} —à—Ç. ‚ú®\n"
                                else:debtors+=f"{nicktg}üí∏ {float(princh.get('price_one_piece'))*int(i['amount_prod'])} üí∏ –∑–∞ üõí {s.get('product_name')} üõí - ‚ú® {i['amount_prod']} —à—Ç. ‚ú®\n"
                            filterdel=m.BuyList.select().where((m.BuyList.grid==groupid) & (m.BuyList.usid==user_id['usid']) & (m.BuyList.product_name==s.get('product_name'))).count()
                            if filterdel!=0:
                                clearbuylist = m.BuyList.delete().where((m.BuyList.usid==user_id['usid']) & (m.BuyList.product_name==s.get('product_name')) & (m.BuyList.grid==groupid))
                                clearbuylist.execute()
            purch_bot.send_message(message.chat.id,debtors)
            clearbuylist = m.BuyList.delete().where(m.BuyList.grid==groupid)
            clearbuylist.execute()
        except Exception as e:print(e)#purch_bot.send_message(message.chat.id,text='‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É QR-–∫–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ ‚ùó')
        greeting(message)
    
    def readerbuylist(message):
        pattern = r"([ –∞-—è–ê-–Ø]*\s?[–∞-—è]*\s?)/*\s?([0-9]+)"
        regcheck=r"([a-zA-Z])+=(\d+)"
        if message.content_type=='photo':
            purch_bot.register_next_step_handler(message,get_photo)
        elif re.match(pattern, message.text) is not None:
            groupdata=m.Group.select().where(m.Group.groupchatid==message.chat.id).get()
            groupid=groupdata.id
            customerdata=m.User.select().where(m.User.tgid==message.from_user.id).get()
            customerid=customerdata.id
            addbuyls=BuyList()
            request = re.findall(pattern, message.text)
            for prods in request:
                for i in range(int(prods[1])):
                    addbuyls.add_buylist(prods[0], groupid, customerid)
            mesg=purch_bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–Ω–æ ‚úÖ")
            purch_bot.register_next_step_handler(mesg,readerbuylist)
            purch_bot.delete_message(message.chat.id,message.message_id+1)
        elif re.match(regcheck,message.text) is not None:
            purch_bot.register_next_step_handler(message,get_qrwithtxt)
        else:
            print(message.text)
            print(re.match(regcheck,message.text))
            mesg=purch_bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, {message.from_user.first_name}!")
            purch_bot.register_next_step_handler(mesg,readerbuylist)
    purch_bot.infinity_polling()